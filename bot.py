import asyncio
import logging
import os
import time
import requests

from aiogram import Bot, Dispatcher, Router
from aiogram import F
from aiogram.types import Message, InputMediaPhoto, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from dotenv import load_dotenv

from second_model import get_movies
from prepare import main_df

load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
YOUTUBE_API_KEY = os.getenv("YOUTUBE_API_KEY")

bot = Bot(token=TOKEN)
dp = Dispatcher()
router = Router()

dp.include_router(router)

def search_trailer(movie_title):
    """–ò—â–µ—Ç —Ç—Ä–µ–π–ª–µ—Ä —Ñ–∏–ª—å–º–∞ –Ω–∞ YouTube"""
    query = f"{movie_title} official trailer"
    url = f"https://www.googleapis.com/youtube/v3/search?part=snippet&q={query}&key={YOUTUBE_API_KEY}&maxResults=1&type=video"

    response = requests.get(url).json()
    if "items" in response and response["items"]:
        video_id = response["items"][0]["id"]["videoId"]
        return f"https://www.youtube.com/watch?v={video_id}"
    return None

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

class RecommendationState(StatesGroup):
    waiting_for_movie_title = State()
    waiting_for_movie_title_second = State()

def get_main_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º –º–æ–¥–µ–ª–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π."""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ (–ú–æ–¥–µ–ª—å 1)", callback_data="start_recommendation")],
            [InlineKeyboardButton(text="–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ (–ú–æ–¥–µ–ª—å 2)", callback_data="start_recommendation_second")]
        ]
    )

@router.message(F.text == "/start")
async def start_command(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:", reply_markup=get_main_keyboard())

@router.callback_query(F.data == "start_recommendation")
async def ask_for_movie(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞:")
    await state.set_state(RecommendationState.waiting_for_movie_title)
    await callback_query.answer()

@router.message(RecommendationState.waiting_for_movie_title)
async def process_movie_title(message: Message, state: FSMContext):
    await recommend_movies(message)
    await state.clear()
    await message.answer("–•–æ—Ç–∏—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑?", reply_markup=get_main_keyboard())

@router.callback_query(F.data == "start_recommendation_second")
async def ask_for_movie_second(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ (–¥–ª—è –≤—Ç–æ—Ä–æ–π –º–æ–¥–µ–ª–∏):")
    await state.set_state(RecommendationState.waiting_for_movie_title_second)
    await callback_query.answer()

@router.message(RecommendationState.waiting_for_movie_title_second)
async def process_movie_title_second(message: Message, state: FSMContext):
    await recommend_movies_second_model(message)
    await state.clear()
    await message.answer("–•–æ—Ç–∏—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑?", reply_markup=get_main_keyboard())

async def recommend_movies_second_model(message: Message):
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –≤—Ç–æ—Ä–æ–π –º–æ–¥–µ–ª–∏."""
    await message.answer("–í—Ç–æ—Ä–∞—è –º–æ–¥–µ–ª—å –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞. –°–∫–æ—Ä–æ –±—É–¥–µ—Ç!")



# @router.message(F.text)
async def recommend_movies(message: Message):
    start_time = time.time()
    movie_title = message.text.strip()

    print(movie_title)

    try:
        recommendations = get_movies(movie_title)
        if not recommendations:
            await message.answer("–§–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")
            return

        for movie in recommendations:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ñ–∏–ª—å–º–µ
            movie_data = main_df.loc[main_df['title'] == movie]

            if movie_data.empty:
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç

            poster_path = movie_data['poster_path'].values[0] if 'poster_path' in movie_data else None
            rating = movie_data['vote_average'].values[0] if 'vote_average' in movie_data else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
            genres = movie_data['genres'].values[0] if 'genres' in movie_data else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            runtime = movie_data['runtime'].values[0] if 'runtime' in movie_data else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
            overview = movie_data['overview'].values[0] if 'overview' in movie_data else "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
            trailer = search_trailer(movie)

            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π URL –ø–æ—Å—Ç–µ—Ä–∞
            poster_url = f"https://image.tmdb.org/t/p/w500{poster_path}" if poster_path else None

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            movie_info = (
                f"üé¨ <b>{movie}</b>\n"
                f"‚≠êÔ∏è –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {rating}\n"
                f"üé≠ –ñ–∞–Ω—Ä—ã: {genres}\n"
                f"‚è≥ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {runtime} –º–∏–Ω—É—Ç\n\n"
                f"üìñ {overview}"
            )

            if trailer:
                movie_info += f"\n\n‚ñ∂Ô∏è <a href='{trailer}'>–°–º–æ—Ç—Ä–µ—Ç—å —Ç—Ä–µ–π–ª–µ—Ä</a>"

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ñ–∏–ª—å–º–µ
            if poster_url:
                await message.answer_photo(poster_url, caption=movie_info, parse_mode="HTML")
            else:
                await message.answer(movie_info, parse_mode="HTML")
    except KeyError as e:
        logging.error(f"–§–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except Exception as e:
        logging.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    end_time = time.time()
    elapsed_time = end_time - start_time
    print(f"Finish recommending. Execution time: {elapsed_time:.2f} seconds\n")

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    print("Bot started\n")
    asyncio.run(main())
